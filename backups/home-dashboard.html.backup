<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Business Dashboard - CVD</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: #333;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header Section */
        .dashboard-header {
            text-align: center;
            margin-bottom: 40px;
            padding: 20px 0;
        }

        .welcome-message {
            font-size: 32px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .date-display {
            font-size: 18px;
            color: #7f8c8d;
            margin-bottom: 20px;
        }

        .business-tagline {
            font-size: 20px;
            color: #006dfe;
            font-weight: 600;
        }

        /* Growth Timeline Section */
        .growth-section {
            background: white;
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .section-title {
            font-size: 24px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }

        .section-title::before {
            content: "üìà";
            margin-right: 10px;
        }

        .timeline-container {
            position: relative;
            height: 200px;
            background: linear-gradient(to right, #e8f5e8, #f0f8ff);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .timeline-line {
            position: absolute;
            top: 50%;
            left: 20px;
            right: 20px;
            height: 3px;
            background: linear-gradient(to right, #27ae60, #006dfe);
            border-radius: 2px;
        }

        .timeline-point {
            position: absolute;
            width: 16px;
            height: 16px;
            background: #006dfe;
            border-radius: 50%;
            top: 50%;
            transform: translateY(-50%);
            border: 3px solid white;
            box-shadow: 0 2px 8px rgba(0, 109, 254, 0.3);
        }

        .timeline-point.milestone {
            width: 24px;
            height: 24px;
            background: #27ae60;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: translateY(-50%) scale(1); }
            50% { transform: translateY(-50%) scale(1.2); }
            100% { transform: translateY(-50%) scale(1); }
        }

        .timeline-label {
            position: absolute;
            top: -30px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 12px;
            font-weight: 600;
            color: #2c3e50;
            white-space: nowrap;
        }

        .timeline-value {
            position: absolute;
            bottom: -30px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 14px;
            font-weight: 700;
            color: #27ae60;
            white-space: nowrap;
        }

        /* Metrics Grid */
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .metric-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .metric-title {
            font-size: 16px;
            font-weight: 600;
            color: #7f8c8d;
        }

        .metric-trend {
            font-size: 14px;
            font-weight: 700;
            display: flex;
            align-items: center;
        }

        .trend-up {
            color: #27ae60;
        }

        .trend-down {
            color: #e74c3c;
        }

        .metric-value {
            font-size: 36px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .metric-subtitle {
            font-size: 14px;
            color: #95a5a6;
        }

        /* Achievement Section */
        .achievement-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 12px;
            padding: 25px;
            color: white;
            margin-bottom: 30px;
            position: relative;
            overflow: hidden;
        }

        .achievement-card::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: shimmer 3s infinite;
        }

        @keyframes shimmer {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .achievement-header {
            font-size: 20px;
            font-weight: 700;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }

        .achievement-header::before {
            content: "üèÜ";
            margin-right: 10px;
        }

        .achievement-description {
            font-size: 16px;
            margin-bottom: 20px;
            opacity: 0.9;
        }

        .achievement-progress {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            height: 8px;
            overflow: hidden;
            margin-bottom: 10px;
        }

        .achievement-progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #27ae60, #2ecc71);
            border-radius: 10px;
            transition: width 2s ease;
        }

        .achievement-percentage {
            font-size: 14px;
            font-weight: 600;
            opacity: 0.9;
        }

        /* Top Performers Section */
        .performers-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }

        .performer-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #27ae60;
        }

        .performer-title {
            font-size: 14px;
            font-weight: 600;
            color: #7f8c8d;
            margin-bottom: 8px;
        }

        .performer-name {
            font-size: 18px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 8px;
        }

        .performer-value {
            font-size: 16px;
            font-weight: 600;
            color: #27ae60;
        }

        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 30px;
        }

        .action-btn {
            background: #006dfe;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .action-btn:hover {
            background: #0056cc;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 109, 254, 0.3);
        }

        .action-btn.secondary {
            background: #27ae60;
        }

        .action-btn.secondary:hover {
            background: #219a52;
            box-shadow: 0 4px 12px rgba(39, 174, 96, 0.3);
        }

        /* Loading States */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100px;
            color: #7f8c8d;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #006dfe;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* AI Chat Widget */
        .chat-widget {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 350px;
            height: 500px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            display: none;
            flex-direction: column;
            overflow: hidden;
        }

        .chat-widget.open {
            display: flex;
        }

        .chat-header {
            background: #006dfe;
            color: white;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 600;
        }

        .chat-close {
            background: none;
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
            padding: 0;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .chat-message {
            padding: 10px 15px;
            border-radius: 12px;
            max-width: 85%;
            word-wrap: break-word;
        }

        .chat-message.user {
            background: #006dfe;
            color: white;
            align-self: flex-end;
        }

        .chat-message.assistant {
            background: #f1f3f4;
            color: #333;
            align-self: flex-start;
        }

        .chat-input-container {
            padding: 15px;
            border-top: 1px solid #e1e5e8;
            display: flex;
            gap: 10px;
        }

        .chat-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #e1e5e8;
            border-radius: 8px;
            font-size: 14px;
            outline: none;
        }

        .chat-input:focus {
            border-color: #006dfe;
        }

        .chat-send {
            background: #006dfe;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .chat-send:hover {
            background: #0056cc;
        }

        .chat-send:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .chat-toggle {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            background: #006dfe;
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0, 109, 254, 0.3);
            font-size: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            z-index: 1001;
        }

        .chat-toggle:hover {
            background: #0056cc;
            transform: scale(1.1);
        }

        .chat-toggle.chat-open {
            display: none;
        }

        .typing-indicator {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 10px 15px;
            background: #f1f3f4;
            border-radius: 12px;
            max-width: 85%;
            align-self: flex-start;
        }

        .typing-dots {
            display: flex;
            gap: 3px;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            background: #666;
            border-radius: 50%;
            animation: typing 1.4s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typing {
            0%, 60%, 100% { opacity: 0.3; }
            30% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Header -->
        <div class="dashboard-header">
            <div class="welcome-message">Good morning! üåÖ</div>
            <div class="date-display" id="currentDate"></div>
            <div class="business-tagline">Your vending empire is growing strong</div>
        </div>

        <!-- Growth Timeline -->
        <div class="growth-section">
            <div class="section-title">Revenue Growth Journey</div>
            <div class="timeline-container" id="timelineContainer">
                <div class="timeline-line"></div>
                <div class="loading" id="timelineLoading">
                    <div class="spinner"></div>
                    Loading your growth story...
                </div>
            </div>
        </div>

        <!-- Key Metrics -->
        <div class="metrics-grid" id="metricsGrid">
            <div class="loading">
                <div class="spinner"></div>
                Loading metrics...
            </div>
        </div>

        <!-- Achievement Section -->
        <div class="achievement-card" id="achievementCard">
            <div class="achievement-header">Achievement Progress</div>
            <div class="achievement-description" id="achievementDescription">
                Loading your achievements...
            </div>
            <div class="achievement-progress">
                <div class="achievement-progress-fill" id="achievementProgressFill"></div>
            </div>
            <div class="achievement-percentage" id="achievementPercentage">0%</div>
        </div>

        <!-- Top Performers -->
        <div class="growth-section">
            <div class="section-title">üåü Top Performers This Week</div>
            <div class="performers-grid" id="performersGrid">
                <div class="loading">
                    <div class="spinner"></div>
                    Loading top performers...
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
            <a href="#route-schedule" class="action-btn">Plan Today's Route</a>
            <a href="#asset-sales" class="action-btn secondary">View Detailed Sales</a>
        </div>
    </div>

    <script src="/api.js"></script>
    <script>
        // Initialize the dashboard
        class DashboardManager {
            constructor() {
                this.api = new CVDApi();
                this.chatOpen = false;
                this.currentMetrics = null;
                this.init();
            }

            async init() {
                this.updateDateTime();
                await this.loadDashboardData();
                this.setupChatWidget();
                
                // Update date every minute
                setInterval(() => this.updateDateTime(), 60000);
            }

            updateDateTime() {
                const now = new Date();
                const options = { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                };
                document.getElementById('currentDate').textContent = now.toLocaleDateString('en-US', options);
            }

            async loadDashboardData() {
                try {
                    // Load all data in parallel
                    const [weeklyMetrics, timeline, achievements, performers] = await Promise.all([
                        this.loadWeeklyMetrics(),
                        this.loadGrowthTimeline(),
                        this.loadAchievements(),
                        this.loadTopPerformers()
                    ]);

                    this.renderMetrics(weeklyMetrics);
                    this.renderTimeline(timeline);
                    this.renderAchievements(achievements);
                    this.renderTopPerformers(performers);

                    // Store metrics for chat context
                    this.currentMetrics = {
                        weekly: weeklyMetrics,
                        timeline: timeline,
                        achievements: achievements,
                        performers: performers
                    };

                } catch (error) {
                    console.error('Error loading dashboard data:', error);
                    this.showError('Failed to load dashboard data');
                }
            }

            async loadWeeklyMetrics() {
                try {
                    return await this.api.getWeeklyMetrics();
                } catch (error) {
                    console.error('Failed to load weekly metrics:', error);
                    // Return fallback data
                    return {
                        weeklyRevenue: 0,
                        weeklyGrowth: 0,
                        deviceCount: 0,
                        avgRevenuePerDevice: 0,
                        topLocation: "No data available",
                        topLocationRevenue: 0
                    };
                }
            }

            async loadGrowthTimeline() {
                try {
                    return await this.api.getGrowthTimeline();
                } catch (error) {
                    console.error('Failed to load growth timeline:', error);
                    // Return fallback data
                    return [
                        { period: "No data", revenue: 0, milestone: false }
                    ];
                }
            }

            async loadAchievements() {
                try {
                    return await this.api.getAchievements();
                } catch (error) {
                    console.error('Failed to load achievements:', error);
                    // Return fallback data
                    return {
                        title: "Loading...",
                        description: "No data available",
                        progress: 0,
                        target: 4000,
                        current: 0
                    };
                }
            }

            async loadTopPerformers() {
                try {
                    return await this.api.getTopPerformers();
                } catch (error) {
                    console.error('Failed to load top performers:', error);
                    // Return fallback data
                    return [
                        { title: "Best Device", name: "No data", value: "$0.00" },
                        { title: "Top Location", name: "No data", value: "$0.00" },
                        { title: "Growth Leader", name: "No data", value: "+0%" }
                    ];
                }
            }

            renderMetrics(metrics) {
                const metricsGrid = document.getElementById('metricsGrid');
                metricsGrid.innerHTML = `
                    <div class="metric-card">
                        <div class="metric-header">
                            <div class="metric-title">This Week's Revenue</div>
                            <div class="metric-trend trend-up">‚Üó +${metrics.weeklyGrowth}%</div>
                        </div>
                        <div class="metric-value">$${metrics.weeklyRevenue.toLocaleString()}</div>
                        <div class="metric-subtitle">vs last week</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-header">
                            <div class="metric-title">Active Devices</div>
                            <div class="metric-trend trend-up">‚Üó All Online</div>
                        </div>
                        <div class="metric-value">${metrics.deviceCount}</div>
                        <div class="metric-subtitle">earning an average of $${metrics.avgRevenuePerDevice}</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-header">
                            <div class="metric-title">Top Location</div>
                            <div class="metric-trend trend-up">‚Üó Leading</div>
                        </div>
                        <div class="metric-value">$${metrics.topLocationRevenue}</div>
                        <div class="metric-subtitle">${metrics.topLocation}</div>
                    </div>
                `;
            }

            renderTimeline(timeline) {
                const container = document.getElementById('timelineContainer');
                const loading = document.getElementById('timelineLoading');
                
                loading.style.display = 'none';
                
                timeline.forEach((point, index) => {
                    const position = (index / (timeline.length - 1)) * 90 + 5; // 5% to 95%
                    
                    const pointEl = document.createElement('div');
                    pointEl.className = `timeline-point ${point.milestone ? 'milestone' : ''}`;
                    pointEl.style.left = `${position}%`;
                    
                    const labelEl = document.createElement('div');
                    labelEl.className = 'timeline-label';
                    labelEl.textContent = point.period;
                    pointEl.appendChild(labelEl);
                    
                    const valueEl = document.createElement('div');
                    valueEl.className = 'timeline-value';
                    valueEl.textContent = `$${point.revenue.toLocaleString()}`;
                    pointEl.appendChild(valueEl);
                    
                    container.appendChild(pointEl);
                });
            }

            renderAchievements(achievement) {
                document.getElementById('achievementDescription').textContent = achievement.description;
                document.getElementById('achievementPercentage').textContent = `${achievement.progress}%`;
                
                // Animate progress bar
                setTimeout(() => {
                    document.getElementById('achievementProgressFill').style.width = `${achievement.progress}%`;
                }, 500);
            }

            renderTopPerformers(performers) {
                const performersGrid = document.getElementById('performersGrid');
                performersGrid.innerHTML = performers.map(performer => `
                    <div class="performer-card">
                        <div class="performer-title">${performer.title}</div>
                        <div class="performer-name">${performer.name}</div>
                        <div class="performer-value">${performer.value}</div>
                    </div>
                `).join('');
            }

            showError(message) {
                console.error(message);
                // Could show user-friendly error message here
            }

            setupChatWidget() {
                const chatToggle = document.getElementById('chatToggle');
                const chatWidget = document.getElementById('chatWidget');
                const chatClose = document.getElementById('chatClose');
                const chatInput = document.getElementById('chatInput');
                const chatSend = document.getElementById('chatSend');

                chatToggle.addEventListener('click', () => {
                    this.toggleChat();
                });

                chatClose.addEventListener('click', () => {
                    this.toggleChat();
                });

                chatSend.addEventListener('click', () => {
                    this.sendMessage();
                });

                chatInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.sendMessage();
                    }
                });
            }

            toggleChat() {
                const chatToggle = document.getElementById('chatToggle');
                const chatWidget = document.getElementById('chatWidget');
                
                this.chatOpen = !this.chatOpen;
                
                if (this.chatOpen) {
                    chatWidget.classList.add('open');
                    chatToggle.classList.add('chat-open');
                    document.getElementById('chatInput').focus();
                } else {
                    chatWidget.classList.remove('open');
                    chatToggle.classList.remove('chat-open');
                }
            }

            async sendMessage() {
                const input = document.getElementById('chatInput');
                const message = input.value.trim();
                
                if (!message) return;
                
                // Add user message to chat
                this.addMessageToChat(message, 'user');
                input.value = '';
                
                // Show typing indicator
                this.showTypingIndicator();
                
                try {
                    // Debug: Log what we're sending
                    console.log('Sending chat context:', this.currentMetrics);
                    
                    // Send message to backend
                    const response = await this.api.makeRequest('POST', '/chat', {
                        message: message,
                        context: this.currentMetrics
                    });
                    
                    // Remove typing indicator and add response
                    this.hideTypingIndicator();
                    this.addMessageToChat(response.response, 'assistant');
                    
                } catch (error) {
                    console.error('Chat error:', error);
                    this.hideTypingIndicator();
                    this.addMessageToChat('Sorry, I encountered an error. Please try again.', 'assistant');
                }
            }

            addMessageToChat(message, sender) {
                const chatMessages = document.getElementById('chatMessages');
                const messageDiv = document.createElement('div');
                messageDiv.className = `chat-message ${sender}`;
                messageDiv.textContent = message;
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            showTypingIndicator() {
                const chatMessages = document.getElementById('chatMessages');
                const typingDiv = document.createElement('div');
                typingDiv.className = 'typing-indicator';
                typingDiv.id = 'typingIndicator';
                typingDiv.innerHTML = `
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                `;
                chatMessages.appendChild(typingDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            hideTypingIndicator() {
                const typingIndicator = document.getElementById('typingIndicator');
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            new DashboardManager();
        });

        // Handle navigation clicks
        document.querySelectorAll('a[href^="#"]').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const hash = link.getAttribute('href');
                window.parent.postMessage({
                    type: 'NAVIGATE',
                    payload: { hash }
                }, window.location.origin);
            });
        });
    </script>
</body>
</html>